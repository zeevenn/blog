import{_ as i,c,a as s,e as l,d as t,b as a,w as u,r as e,o as d}from"./app-C2pH26RV.js";const r={},m={href:"https://twitter.com/ryanflorence/status/1788364906900959481",target:"_blank",rel:"noopener noreferrer"};function k(v,n){const o=e("RouteLink"),p=e("ExternalLinkIcon");return d(),c("div",null,[n[11]||(n[11]=s("p",null,"乐观更新是一种在用户操作后，立即更新 UI 的策略，即使操作可能失败。",-1)),n[12]||(n[12]=s("h2",{id:"useoptimistic",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#useoptimistic"},[s("span",null,[s("code",null,"useOptimistic")])])],-1)),s("p",null,[n[1]||(n[1]=t("Transitions (",-1)),a(o,{to:"/frontend/framework/react/11-useTransition.html"},{default:u(()=>[...n[0]||(n[0]=[s("code",null,"useTransition",-1)])]),_:1}),n[2]||(n[2]=t(") 可以防止 UI 在组件挂起时发生变化（本质是调度策略）。但有时候可能希望在组件挂起时显示不同的 UI（甚至在组件挂起时多次改变该 UI）。",-1))]),s("p",null,[n[4]||(n[4]=s("code",null,"useOptimistic",-1)),n[5]||(n[5]=t(" 可以实现这一点，它就像一个 ",-1)),n[6]||(n[6]=s("code",null,"useState",-1)),n[7]||(n[7]=t(" 钩子，它会在组件挂起时改变 UI（而不是展示 fallback UI）。它经常用于实现乐观更新，这就是为什么它被称为 ",-1)),n[8]||(n[8]=s("code",null,"useOptimistic",-1)),n[9]||(n[9]=t("。可能叫它 ",-1)),s("a",m,[n[3]||(n[3]=s("code",null,"useTransitionState",-1)),a(p)]),n[10]||(n[10]=t(" 更合适。",-1))]),n[13]||(n[13]=l(`<p>表单 <code>action</code> 会自动被 <code>startTransition</code> 包裹，所以如果你有一个表单 <code>action</code>，你希望实现乐观更新（需要更新状态），那么你需要使用 <code>useOptimistic</code> 来绕过 <code>transition</code> 的挂起状态。</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">Todo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> todo <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> todo<span class="token operator">:</span> TodoItem <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> <span class="token punctuation">[</span>isComplete<span class="token punctuation">,</span> setIsComplete<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useOptimistic</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span>isComplete<span class="token punctuation">)</span>

	<span class="token keyword">return</span> <span class="token punctuation">(</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span>
			<span class="token attr-name">action</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
				<span class="token function">setIsComplete</span><span class="token punctuation">(</span><span class="token operator">!</span>isComplete<span class="token punctuation">)</span>
				<span class="token keyword">await</span> <span class="token function">updateTodo</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token operator">!</span>isComplete<span class="token punctuation">)</span>
			<span class="token punctuation">}</span><span class="token punctuation">}</span></span>
		<span class="token punctuation">&gt;</span></span><span class="token plain-text">
			</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
				</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>
					<span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span>
					<span class="token attr-name">checked</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>isComplete<span class="token punctuation">}</span></span>
					<span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>todos-checkbox<span class="token punctuation">&quot;</span></span>
				<span class="token punctuation">/&gt;</span></span><span class="token plain-text">
				</span><span class="token punctuation">{</span>todo<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token plain-text">
			</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
		</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
	<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>isComplete</code> 是基于 <code>todo.isComplete</code> 的，但在 <code>transition</code> 期间，我们可以将其改变为 <code>!isComplete</code>。一旦 <code>transition</code> 完成（无论成功还是失败），它将回退到 <code>todo.isComplete</code> 的值。</p><p>我们可以在 <code>transition</code> 期间多次更新乐观状态，这意味着如果你有一个多步骤操作，你可以更新消息以让用户知道你在运行过程中的哪一步。</p><h3 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h3><p><code>useOptimistic</code> 的参数如下：</p><ul><li><code>optimisticState</code>：乐观状态，即在 <code>transition</code> 期间的状态</li><li><code>addOptimistic</code>：添加乐观状态，本地先「伪造」一个状态，立刻渲染到 UI 上</li><li><code>actualState</code>：实际状态，来自真实数据</li><li><code>updateFn</code>：更新函数，一个 reducer 函数，用于合并乐观状态和实际状态</li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> <span class="token punctuation">[</span>optimisticState<span class="token punctuation">,</span> addOptimistic<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useOptimistic</span><span class="token punctuation">(</span>
  actualState<span class="token punctuation">,</span>
  <span class="token comment">// updateFn</span>
  <span class="token punctuation">(</span>prev<span class="token punctuation">,</span> newInput<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// merge and return new state</span>
    <span class="token comment">// with optimistic value</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对比-usetransition" tabindex="-1"><a class="header-anchor" href="#对比-usetransition"><span>对比 <code>useTransition</code></span></a></h3><p>如果你发请求，依赖的 <code>use(fetchPromise)</code> 还没 resolve → <code>Suspense</code> 就会触发 <code>fallback</code>。但 <code>useOptimistic</code> 的设计目标是：让 UI 可以立即显示一个「乐观结果」，避免 <code>fallback</code> 抢走 UI。</p><p><code>useOptimistic</code> 的效果和原理有点类似 <code>startTransition</code>，核心思路：</p><ul><li>给你一个「临时状态」（乐观 UI），立刻同步渲染出来</li><li>真实数据到达后，再更新为最终状态</li><li>这期间不会触发 <code>Suspense</code> <code>fallback</code>，因为 UI 已经有数据可渲染（虽然是乐观的）</li></ul><p>两者像是反向操作：</p><ul><li><code>useTransition</code> 解决的是 延迟更新，旧 UI 保留</li><li><code>useOptimistic</code> 解决的是 提前更新，新 UI 假装完成</li></ul><h2 id="useformstatus" tabindex="-1"><a class="header-anchor" href="#useformstatus"><span><code>useFormStatus</code></span></a></h2><p><code>useFormStatus</code> 是 <code>react-dom</code> 提供的一个 hook。它用于获取表单的提交状态。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>将 <code>form</code> 元素视为 <code>context provider</code>，而 <code>useFormStatus</code> 钩子视为 <code>context consumer</code>。</p></div><p>你可以创建一个提交按钮，它可以访问其父表单的当前状态，并在表单操作进行时显示一个 pending 状态：</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">SubmitButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> formStatus <span class="token operator">=</span> <span class="token function">useFormStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
			</span><span class="token punctuation">{</span>formStatus<span class="token punctuation">.</span>pending <span class="token operator">?</span> <span class="token string">&#39;Creating...&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;Create&#39;</span><span class="token punctuation">}</span><span class="token plain-text">
		</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
	<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>formStatus</code> 还有其他一些有用的属性，可以用于实现乐观 UI（比如正在提交的数据）。</p><ul><li><code>formStatus.pending</code>：一个布尔值，如果为 <code>true</code>，则表示父 <code>&lt;form&gt;</code> 正在提交。否则为 <code>false</code>。</li><li><code>formStatus.data</code>：一个实现了 <code>FormData</code> 接口的对象，包含了父 <code>&lt;form&gt;</code> 正在提交的数据。如果没有活动提交或没有父 <code>&lt;form&gt;</code>，则为 <code>null</code>。</li><li><code>formStatus.action</code>：正在提交的 action</li><li><code>formStatus.method</code>：一个字符串值，表示父 <code>&lt;form&gt;</code> 正在提交时使用的是 GET 还是 POST HTTP 方法。默认情况下，一个 <code>&lt;form&gt;</code> 会使用 GET 方法，可以通过 <code>method</code> 属性指定。</li></ul>`,21))])}const b=i(r,[["render",k],["__file","12-useOptimistic.html.vue"]]),f=JSON.parse('{"path":"/frontend/framework/react/12-useOptimistic.html","title":"useOptimistic","lang":"zh-CN","frontmatter":{"title":"useOptimistic","tag":["react","hooks"],"description":"乐观更新是一种在用户操作后，立即更新 UI 的策略，即使操作可能失败。 useOptimistic Transitions () 可以防止 UI 在组件挂起时发生变化（本质是调度策略）。但有时候可能希望在组件挂起时显示不同的 UI（甚至在组件挂起时多次改变该 UI）。 useOptimistic 可以实现这一点，它就像一个 useState 钩子，它会...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/frontend/framework/react/12-useOptimistic.html"}],["meta",{"property":"og:title","content":"useOptimistic"}],["meta",{"property":"og:description","content":"乐观更新是一种在用户操作后，立即更新 UI 的策略，即使操作可能失败。 useOptimistic Transitions () 可以防止 UI 在组件挂起时发生变化（本质是调度策略）。但有时候可能希望在组件挂起时显示不同的 UI（甚至在组件挂起时多次改变该 UI）。 useOptimistic 可以实现这一点，它就像一个 useState 钩子，它会..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-01T06:53:01.000Z"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"hooks"}],["meta",{"property":"article:modified_time","content":"2025-09-01T06:53:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"useOptimistic\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-01T06:53:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 useOptimistic","slug":"useoptimistic","link":"#useoptimistic","children":[{"level":3,"title":"1.1 参数","slug":"参数","link":"#参数","children":[]},{"level":3,"title":"1.2 对比 useTransition","slug":"对比-usetransition","link":"#对比-usetransition","children":[]}]},{"level":2,"title":"2 useFormStatus","slug":"useformstatus","link":"#useformstatus","children":[]}],"git":{"createdTime":1756709581000,"updatedTime":1756709581000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":1}]},"readingTime":{"minutes":2.85,"words":855},"filePathRelative":"frontend/framework/react/12-useOptimistic.md","localizedDate":"2025年9月1日","excerpt":"","autoDesc":true}');export{b as comp,f as data};
